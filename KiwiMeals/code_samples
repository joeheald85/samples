## This is a sample from the User Model from KiwiMeals.

class User < ActiveRecord::Base
  authenticates_with_sorcery!
  
  has_one :parent
  has_one :admin
  has_many :scool_admin_roles
  has_many :account_admin_roles
  
  attr_accessible :username, :password, :password_confirmation, :email, :admin_attributes
  accepts_nested_attributes_for :admin
  validates_confirmation_of :password, if: :password
  validates_presence_of :password, :on => :create
  validates :username, :presence => true, :uniqueness => true
  validates :email, :presence => true, :format => { :with => /^([^@\s]+)@([a-z0-9]+\.)+[a-z]{2,}$/i}
  validate :password_format
  
  def password_format
    if !password.blank?
      num = 0
      password.split('').each{|char| num += 1 if char.to_i.to_s == char }
      if password.length < 6 and num > 0
        errors.add(:password, "must contain at least 6 characters")
      elsif num == 0 and password.length >= 6
        errors.add(:password, "must contain at least 1 numeric value")
      elsif num == 0
        errors.add(:password, "must contain at least 6 characters and 1 numeric value")
      end
    end
  end
  
  #use this in a view to see if a user has a particular school role
  def school_role?(role)
    role = SchoolRole.find_by_name(role)
    account = SchoolAdminRole.where(:admin_id => self.admin.id, :school_role_id => role.id)
    return false if account.empty?
    return true
  end
  
  #use this in a view to see if a user has a particular account role
  def account_role?(role)
    role = AccountRole.find_by_name(role)
    account = AccountAdminRole.where(:admin_id => self.admin.id, :account_role_id => role.id, :account_id => self.admin.account.id)
    return false if account.empty?
    return true
  end
  
  #this is used in the ability model
  def role_school_id(role)
    role = SchoolRole.find_by_name(role)
    schools = SchoolAdminRole.where(:school_role_id => role.id, :admin_id => self.admin.id).collect(&:school_id)
  end
  
  #this is used in the ability model
  def role_account_id(role)
    role = AccountRole.find_by_name(role)
    accounts = AccountAdminRole.where(:account_role_id => role.id, :account_id => self.admin.account.id, :admin_id => self.admin.id)
    return 0 if accounts.empty?
    return self.admin.account.id
  end
  
  #this is used in the ability model
  def holiday_role_account_id
    role = SchoolRole.find_by_name('manage_holiday')
    schools = SchoolAdminRole.where(:school_role_id => role.id, :admin_id => self.admin.id)
    return 0 if schools.empty?
    return self.admin.account.id
  end
  
  #used in ability model
  def is_account_admin?
    if !self.admin.nil?
      role = AccountRole.find_by_name('account_admin')
      accounts = AccountAdminRole.where(:account_role_id => role.id, :admin_id => self.admin.id)
      return true if !accounts.empty?
    end
    return false
  end
  
  def is?(type)
    case type
    when :admin
      self.global_admin #global admin
    when :account
      admin.present?    #account/school admin
    when :parent
      parent.present?   #parent
    end
  end
end

## Sample from the lunch menu page

<%= title "Place Order"%>
<div class="filter_bar form_style">
	<%= form_tag new_child_order_path(@child), :method => "get", :id=> 'filter_menus_form' do %>
		<span class="contain">
			<%= select_year(@date, {start_year: Time.now.year, end_year: Time.now.year + 2}, { :onChange => "this.form.submit();" }) %>
		</span>
		<span class="contain">
			<%= select_month(@date, {add_month_numbers: false}, {:onChange => "this.form.submit()"} ) %>
		</span>
		<span class="contain">
			<%= collection_select(:menu_type, :menu_type_id, @child.school.account.menu_types.all, :id, :name, {:selected => @menu_type_id}, {:onChange => "this.form.submit()" }) %>
		</span>
		<span class="contain">
			<%= collection_select(:child, :id, current_user.parent.children.active, :id, :first_name, {:selected => @child.id}, {:onChange => "this.form.submit()" }) %>
		</span>
		<span class="pull-right">
			<p>Select All Days</p>
			<%= check_box_tag 'select_all_days', 1, false, class: 'select_all_days' %>
		</span>
	<% end %>
</div>

<% if !@menu.blank? %>
	<%= form_for [@child, @order], :html => {:id => 'order_form'} do |f| %>
	
		<%= render "calendar" %>
	  
		<%= hidden_field_tag 'order[school_id]', @child.school_id %>
		<%= hidden_field_tag 'order[menu_id]', @menu.id %>
		<%= hidden_field_tag 'order[parent_id]', @child.parent_id %>
		<%= hidden_field_tag 'order[child_id]', @child.id %>
	  
		<div class="order_total pull-right">
			<div class="inner">
				<h3><i class="icon icon32"></i>Your Order</h3>
				<div class="line-item">
					<span>Days Selected:</span> <span class="days_selected pull-right"></span>
				</div>
				<div class="line-item total">
					<span>Total Price:</span> <span class="total_price green pull-right"></span>
				</div>
			</div>
		</div>
	  
		<div class="submit clear pull-right">
			<%= image_submit_tag "buttons/add_to_cart.png", class: "button_save_changes", alt: "Add To Cart" %>
		</div>
	<% end %>
<% else %>
	<h3>There are no Menus of this type for your child's school on this Month and Year. Please try again.</h3>
<% end %>

## calendar partial

<div id="order_calendar" class="calendar order_cal">
	<h2><%= @date.strftime('%B %Y') %></h2>
	<table cellpadding="2">
		<thead>
			<tr>
				<th>Monday</th>
				<th>Tuesday</th>
				<th>Wednesday</th>
				<th>Thursday</th>
				<th>Friday</th>
			</tr>
		</thead>
	<% index = 0 %>
	<% selected = {} %>
	<%= hidden_field_tag 'admin_session', 'true' if !params[:admin].blank? %>
	<% @calendar.each do |week| %>
		<% nutrition = {:calories => 0, :fat => {:total => 0, :days => 0}, :sat_fat => {:total => 0, :days => 0}}%>
		<tr>
		<% week.each do |day| %>
			<% locked = false %>
			<% if day.present? %>
				<% menu_day = @menu.days.where(day: day).first %>
				<% order_day = @order.order_items.where(:day => day) if !@order.new_record? %>
				<% nutrition[:calories] += menu_day.products.alive.sum(:calories) if !menu_day.blank? %>
				<% nutrition[:fat][:total] += menu_day.products.alive.sum(:fat) if !menu_day.blank? %>
				<% nutrition[:fat][:days] += 1 if !menu_day.blank? %>
				<% nutrition[:sat_fat][:total] += menu_day.products.alive.sum(:saturated_fat) if !menu_day.blank? %>
				<% nutrition[:sat_fat][:days] += 1 if !menu_day.blank? %>
				<% @date = Date.new(@date.year, @date.month, day) %>
				<% holiday = @child.school.school_holidays.where("menu_type_id = ? and holiday_id in (?)", @menu.menu_type_id, @child.school.holidays.where(:date => @date).collect(&:id)).first %>
				<% lockout_end = Date.today + @child.school.account.lockout_period.days + (Date.today..(Date.today + @child.school.account.lockout_period.days)).select{|d| [0,6].include?(d.wday)}.size.days %>
				<% locked = true if (@date <= (lockout_end + (6 == lockout_end.wday ? 2.days : 0.days) + (0 == lockout_end.wday ? 1.day : 0.days)) or !holiday.blank?) and session[:admin].blank? %>
				<% locked = true if (@date <= Date.today or !holiday.blank?) and !session[:admin].blank? %>
				<%= content_tag(:td, class: "day#{' locked' if locked}" ) do %>
				<div class="cont">
					<div class="day_top clear">
						<span class="day_num">
							<% if !menu_day.blank? %>
								<%= check_box_tag 'selected_days[]', day, !order_day.blank?, class: 'select_day', :disabled => (session[:admin].blank? ? locked : false) %>
								<%= label_tag "selected_days_", day %>
							<% else %>
								<%= day %>
							<% end %>
						</span>
						<% if (!locked or !session[:admin].blank?) and !menu_day.blank? %>
							<%= link_to '<i></i> Edit this day'.html_safe, '#', class: "day_action edit_day pull-right#{' show' if !order_day.blank?}" %>
							<%= link_to '<i></i> Close Editor'.html_safe, '#', class: 'day_action close_day pull-right' %>
						<% end %>
					</div>
					<% if locked and session[:admin].blank? %>
						<div class="lockout">
							<% if !holiday.blank? %>
								<%= ('<p><strong>'+holiday.holiday.name+'</strong></p>').html_safe %>
							<% else %>
								<% if !menu_day.blank? %>
									<% menu_day.product_categories.alive.uniq.each do |category| %>
										<span class="display_<%=category.id%> line_item">
											<% if !@order.new_record? and !order_day.blank? %>
												<% selected["#{day}_#{category.id}"] = order_day.where(["product_id in (?)", category.products.alive.collect(&:id)]).any? ? order_day.where(["product_id in (?)", category.products.alive.collect(&:id)]).first.product_id : '' %>
											<% else %>
												<% selected["#{day}_#{category.id}"] = @menu.menu_defaults.where(:product_category_id => category.id, :day => day).any? ? @menu.menu_defaults.where(:product_category_id => category.id, :day => day).first.product_id : '' %>
											<% end %>
											<label><%= category.name %>:</label> <span class="<%= category.id %>_product"><%= selected["#{day}_#{category.id}"].blank? ? 'No Selection' : Product.find(selected["#{day}_#{category.id}"]).name %></span>
										</span>
									<% end %>
								<% end %>
							<% end %>
						</div>
					<% end %>
					<div class="display<%=' hide' if locked and session[:admin].blank? %>">
						<% if !menu_day.blank? %>
							<% menu_day.product_categories.alive.uniq.each do |category| %>
								<% if !@order.new_record? and !order_day.blank? %>
									<% selected["#{day}_#{category.id}"] ||= order_day.where(["product_id in (?)", category.products.alive.collect(&:id)]).any? ? order_day.where(["product_id in (?)", category.products.alive.collect(&:id)]).first.product_id : '' %>
								<% else %>
									<% selected["#{day}_#{category.id}"] ||= @menu.menu_defaults.where(:product_category_id => category.id, :day => day).any? ? @menu.menu_defaults.where(:product_category_id => category.id, :day => day).first.product_id : '' %>
								<% end %>
								<span class="display_<%=category.id%> line_item">
									<label><%= category.name %>:</label> <span class="<%= category.id %>_product"><%= selected["#{day}_#{category.id}"].blank? ? 'No Selection' : Product.find(selected["#{day}_#{category.id}"]).name %></span>
								</span>
							<% end %>
						<% end %>
					</div>
					<div class="order">
						<% if !menu_day.blank? %>
							<% menu_day.product_categories.alive.uniq.each do |category| %>
								<span class="order_<%=day%> line_item" data-category="<%=category.id%>">
									<%= hidden_field_tag "order[order_items_attributes][#{index}][id]", order_day.where(["product_id in (?)", category.products.alive.collect(&:id)]).first.id if !selected["#{day}_#{category.id}"].blank? and !order_day.blank? %>
									<%= hidden_field_tag "order[order_items_attributes][#{index}][_destroy]", false, class: 'destroy_field' if !@order.new_record? %>
									<%= hidden_field_tag "order[order_items_attributes][#{index}][day]", day %>
									<%= hidden_field_tag "order[order_items_attributes][#{index}][price]", (selected["#{day}_#{category.id}"].blank? ? 0 : Product.find(selected["#{day}_#{category.id}"]).price ), class: 'price_field' %>
									<label><%= category.name %>:</label>
									<%= collection_select("order[order_items_attributes][#{index}]", :product_id, 
													menu_day.products.alive.where(:product_category_id => category.id), :id, :name, 
													{:prompt => "Select Here", :selected => selected["#{day}_#{category.id}"]}, {:disabled => order_day.blank?, :class => "product_category"}) %>
									<% index += 1 %>
								</span>
							<% end %>
						<% end %>
					</div>
				</div>
				<% end %>
			<% else %>
				<td></td>
			<% end %>
		<% end %>
			<% case @date.wday %>
			<% when 1 %>
				<% 4.times do %><td class="day"></td><% end %>
			<% when 2 %>
				<% 3.times do %><td class="day"></td><% end %>
			<% when 3 %>
				<% 2.times do %><td class="day"></td><% end %>
			<% when 4 %>
				<td class="day"></td>
			<% end %>
			<% if false # commented out for current release %> 
				<td class="calories">
					<div class="cont">
						<div class="tab"></div>
						<div class="cover"></div>
						<div class="info">
							<table><tbody><tr><td>
								<div class="inner">
									<h5>Calorie and Nutrition Info for This Week</h5>
									<p>Calories: <%= nutrition[:calories] %></p>
									<p>Fat: <%= nutrition[:fat][:days] == 0 ? "0" : nutrition[:fat][:total]/nutrition[:fat][:days] %>%</p>
									<p>Saturated Fat: <%= nutrition[:sat_fat][:days] == 0 ? "0" : nutrition[:sat_fat][:total]/nutrition[:sat_fat][:days] %>%</p>
								</div>
							</td></tr></tbody></table>
						</div>
					</div>
				</td>
			<% end %>
		</tr>
	<% end %>
	</table>
</div>